version: 2.1

executors:
  ubuntu_vm:
    machine:
      image: ubuntu-1604:202007-01
      # DO NOT USE THIS YET! This costs 200 credits *per job run* so is extremely expensive for the free plan, but we can turn it on one day if we get more credits
      # docker_layer_caching: true

# NOTE: Because CircleCI jobs run on separate machines from each other, we duplicate steps (like checkout) between jobs. This is because doing the "correct" DRY
#  refactoring of, "one job for checkout, one job for build Docker image, etc." would require a) persisting files between jobs and b) persisting Docker images between
#  jobs. Both are annoying (saving/loading workspaces require re-downloading the workspace over the network, and there doesn't seem to be a good way to do Docker
#  images), so we run everything inside a single job.
# See also: https://discuss.circleci.com/t/can-docker-images-be-preserved-between-jobs-in-a-workflow-without-a-manual-load-save/23388/12
jobs:
  validate:
    executor: ubuntu_vm
    steps:
      - checkout

      # Gotchas I discovered when writing this:
      # - Without the '--no-pager' flag, Git will print "WARNING: Terminal is not fully functional" and not display any output
      # - Circle has no way of getting the PR base branch, so we have to hardcode develop :( See: https://ideas.circleci.com/cloud-feature-requests/p/provide-env-variable-for-branch-name-targeted-by-pull-request
      # - The --exit-code flag to git-diff returns 0 on no changes, 1 on changes
      # - We have to use 'origin/develop' rather than 'develop' because Circle does a shallow checkout, and 'develop' gets set to something weird and wrong that makes the check buggy
      - run: "! git --no-pager diff --exit-code origin/develop...HEAD CHANGELOG.md"
      
      # Docker is restricting anonymous image pulls, so we log in before we do any pulling
      - run: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"

      # As of 2020-08-30, the VMs we build on only have 2 cores so we set parallelism to 2
      - run: scripts/build_and_run.sh all --env PARALLELISM=2 --env CLIENT_ID=${KURTOSIS_INTERNAL_CLIENT_ID} --env CLIENT_SECRET=${KURTOSIS_INTERNAL_CLIENT_SECRET}

  push_docker_image:
    environment:
      IMAGE_REPO: "kurtosistech/kurtosis-go-example"
    executor: ubuntu_vm
    steps:
      - checkout
      # Docker is restricting anonymous image pulls, so we log in before we do any pulling
      - run: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
      - run: scripts/build_and_run.sh build
      - when:
          condition: "<<pipeline.git.tag>>"
          steps:
            - run: echo 'export TAG_NAME=<<pipeline.git.tag>>' >> ${BASH_ENV}

            # When we run as the result of a tag build, the built image gets a tag called "HEAD" so we need to re-tag to the X.Y.Z name
            - run: "docker tag ${IMAGE_REPO}:HEAD ${IMAGE_REPO}:<<pipeline.git.tag>>"
      - unless:
          condition: "<<pipeline.git.tag>>"
          steps:
            - run: echo 'export TAG_NAME=<<pipeline.git.branch>>' >> ${BASH_ENV}
      - run: "docker push ${IMAGE_REPO}:${TAG_NAME}"

workflows:
  build:
    jobs:
      - validate:
          context:
            - docker-user
            - kurtosis-user
          filters:
            branches:
              ignore:
                - develop
                - master
      - push_docker_image:
          context:
            - docker-user
            - kurtosis-user
          filters:
            branches:
              only:
                - develop
                - master
            tags: 
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
